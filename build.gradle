import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat

buildscript {

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.10"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath "org.jmailen.gradle:kotlinter-gradle:1.20.1"
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16'
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.7.1"
        classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc2'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects { project ->
    apply plugin: 'net.ltgt.errorprone'
    apply from: rootProject.file('ktlint.gradle')

    repositories {
        mavenCentral()
        google()
        jcenter()
    }

    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.3.1'
    }

    if (!project.name.endsWith("sample")) {
        apply plugin: "com.github.sherter.google-java-format"
        apply plugin: 'checkstyle'
        apply plugin: 'pmd'

        task pmd(type: Pmd) {
            ruleSetFiles = files("${project.rootDir}/pmd.xml")
            ruleSets = ["java-basic", "java-braces"]
            source 'src/main/java'
            include '**/*.java'
            exclude '**/gen/**'
            classpath = files()
            consoleOutput = true
        }

        task checkstyle(type: Checkstyle) {
            configFile rootProject.file('checkstyle.xml')
            source 'src/main/java'
            ignoreFailures false
            showViolations true
            include '**/*.java'

            classpath = files()
        }

        googleJavaFormat {
            group "formatting"
            options style: 'AOSP'
        }

        task format(type: GoogleJavaFormat) {
            source 'src/main/java'
            include '**/*.java'
            exclude '**/gen/**'
        }

        project.afterEvaluate {
            def task = null
            if (project.tasks.findByName('preBuild')) {
                task = preBuild
            } else if (project.tasks.findByName('clean')) {
                task = clean
            }
            if (task != null) {
                task.dependsOn "format"
                tasks['pmd'].shouldRunAfter format
                tasks['checkstyle'].shouldRunAfter format

                task.dependsOn "formatKotlin"
                tasks['lintKotlin'].shouldRunAfter formatKotlin
            }
        }
    }
}
